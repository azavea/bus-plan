package com.example;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;

import com.example.Bus;
import com.example.School;
import com.example.SourceOrSink;
import com.example.SourceOrSinkOrAnchor;
import com.example.Stop;
import com.example.Student;

global HardSoftLongScoreHolder scoreHolder;

// ---------------------------------

// rule "startOfRouteCost"
//      when
//          $bus : Bus(next != null)
//      then
//          double distance = $bus.getNode().distance($bus.getNext().getNode());
//          int cost = (int)(distance * 10);
//          scoreHolder.addSoftConstraintMatch(kcontext, - 20000 - cost);
// end

// rule "middleOfRouteCost"
//      when
//          $s : SourceOrSink(next != null)
//      then
//          double distance = $s.getNode().distance($s.getNext().getNode());
//          int cost = (int)(distance * 100);
//          scoreHolder.addSoftConstraintMatch(kcontext, - cost);
// end

// rule "endOfRouteCost"
//      when
//          $s : SourceOrSink(next == null, $b : bus != null)
//      then
//          double distance = $s.getNode().distance($b.getNode());
//          int cost = (int)(distance * 10);
//          scoreHolder.addSoftConstraintMatch(kcontext, - cost);
// end

rule "kids"
     when
         Student()
     then
         scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "schoolFound"
     when
         $school : School(bus != null)
     then
         scoreHolder.addHardConstraintMatch(kcontext, + $school.sink());
end

rule "time"
     when
         $s : SourceOrSinkOrAnchor(next != null, bus != "dummy")
     then
         scoreHolder.addSoftConstraintMatch(kcontext, - (int)($s.getNode().time($s.getNext().getNode())));
end

rule "returnTime"
     when
         $s : SourceOrSink(next == null, bus != null, bus != "dummy")
     then
         scoreHolder.addSoftConstraintMatch(kcontext, - (int)($s.getNode().time($s.getBus().getNode())));
end
